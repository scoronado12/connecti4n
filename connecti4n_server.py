# File:   connecti4n_server.py
# Author: Ethan Martin & Stefano Coronado
# Date:   28 March 2019
# Brief:  Server for a game of Connect I4n
#
# We hereby declare on our word of honor that we have neither given nor
# received any unauthorized help on this work.

import socket
import random


VERSION = '1.0'
CODES = ['ERROR', 'STOP', 'START', 'MOVE', 'BOARD', 'RESULT']


class MalformedMessageException(Exception):
    pass


def board_flatten(board):
    out = str(len(board)) + ' ' + str(len(board[0]))
    for row in board:
        for col in row:
            out +=  ' ' + str(col)

    return out


def board_check_victory(board, who):
    for i, row in enumerate(board):
        for j, val in enumerate(row):
            if val == who:
                dirs = [(-1, 1), (0, 1), (1, 1), (1, 0)] 
                lines = [[(x * n, y * n) for n in range(1,4)] for x,y in dirs]

                return any(all(0 <= x + i < len(board) and 
                               0 <= y + j < len(row) and
                               board[x + i][y + j] == who for x, y in line)
                           for line in lines)
    return False

def board_add_token(board, who, where):
    if board[0][where] != 0:
        raise IndexError
    if board[-1][where] == 0:
        board[-1][where] = who
        return

    for i, row in enumerate(board):
        if row[where] != 0:
            board[i - 1][where] = who


def c4n_validate(data):
    # Decode the data
    lines = data.decode().split('\n')

    # Extract the header
    header = lines[0].split()
    
    # Validate length
    if (len(header) != 3 or
        header[0] != 'C4N' or
        header[1] != VERSION or
        header[2] not in CODES):
        print('Bad message', data.decode())
        raise MalformedMessageException

    # Read the content if present
    if len(lines) > 1:
        content = ''
        for l in lines[1:]:
            content += l
    else:
        content = None

    # Return results
    print('Good message!')
    return header[2], content


def c4n_message(code, content):
    # Make sure that we have a valid code
    if code not in CODES:
        return None

    # Construct the base message
    out = 'C4N ' + VERSION + ' ' + code

    # If we have content to add, append it
    if content != None:
        out += '\n' + str(content)

    # Return generated bytes
    return out.encode()


def main():
    HOST = 'localhost'
    PORT = 4414

    # Create the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    # Bind to the desired address
    sock.bind((HOST, PORT))

    # Wait for a client
    sock.listen()
    conn, addr = sock.accept()

    print('New connection from:', addr)

    c4n_validate(conn.recv(1024))

    # Create game board
    board = [[ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ]]

    # Game loop
    win = None
    while True:
        # Check for player victory
        if (board_check_victory(board, 1)):
            win = 1

        # Process AI turn
        while True:
            try:
                board_add_token(board, 2, random.randrange(7))
                break
            except IndexError:
                pass


        # Check for AI victory
        if (board_check_victory(board, 2)):
            win = 2

        if win:
            conn.sendall(c4n_message('RESULT', win))

        # Send board state
        conn.sendall(c4n_message('BOARD', board_flatten(board)))

        #break out if the game is over
        if win:
            break

        while True:
            try:
                code, content = c4n_validate(conn.recv(1024))
                break
            except MalformedMessageException:
                pass

        if code == 'MOVE':
            board_add_token(board, 1, int(content))


    # Close the client connection
    conn.close()

    # Close the socket
    sock.close()


main()
