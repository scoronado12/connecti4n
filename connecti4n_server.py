# File:   connecti4n_server.py
# Author: Ethan Martin & Stefano Coronado
# Date:   28 March 2019
# Brief:  Server for a game of Connect I4n
#
# We hereby declare on our word of honor that we have neither given nor
# received any unauthorized help on this work.

import socket


VERSION = '1.0'
CODES = ['ERROR', 'STOP', 'START', 'MOVE', 'BOARD', 'RESULT']


def board_flatten(board):
    out = str(len(board)) + ' ' + str(len(board[0]))
    for row in board:
        for col in row:
            out +=  ' ' + str(col)

    return out


def c4n_validate(data):
    # Decode the data
    lines = data.decode().split('\n')

    # Extract the header
    header = lines[0].split()
    
    # Validate length
    if (len(header) != 3 or
        header[0] != 'C4N' or
        header[1] != VERSION or
        header[2] not in CODES):
        # TODO fail
        print('Bad message')
        return None

    # Read the content if present
    if len(lines) > 1:
        content = ''
        for l in lines[1:]:
            content += l
    else:
        content = None

    # Return results
    print('Good message!')
    return header[2], content


def c4n_message(code, content):
    # Make sure that we have a valid code
    if code not in CODES:
        return None

    # Construct the base message
    out = 'C4N ' + VERSION + ' ' + code

    # If we have content to add, append it
    if content != None:
        out += '\n' + str(content)

    # Return generated bytes
    return out.encode()


def main():
    HOST = 'localhost'
    PORT = 4414

    # Create the socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    # Bind to the desired address
    sock.bind((HOST, PORT))

    # Wait for a client
    sock.listen()
    conn, addr = sock.accept()

    print('New connection from:', addr)

    c4n_validate(conn.recv(1024))

    # Create game board
    board = [[ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ],
             [ 0, 0, 0, 0, 0, 0, 0 ]]


    # Send board state
    conn.sendall(c4n_message('BOARD', board_flatten(board)))

    # Close the client connection
    conn.close()

    # Close the socket
    sock.close()


main()
